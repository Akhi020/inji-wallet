# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

xcode_select '/Applications/Xcode.app'

default_platform(:ios)
APP_STORE_CONNECT_TEAM_ID = ENV["APP_STORE_CONNECT_TEAM_ID"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["INJI_IOS_DEVELOPER_APP_IDENTIFIER"]
TEAM_ID = ENV["INJI_IOS_DEVELOPER_PORTAL_TEAM_ID"]
FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD = ENV["INJI_IOS_FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"]
FASTLANE_USER= ENV["IOS_FASTLANE_APPLE_ID"]
PROVISIONING_PROFILE_SPECIFIER = ENV["INJI_IOS_PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["INJI_IOS_TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["INJI_IOS_TEMP_KEYCHAIN_PASSWORD"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
SLACK_URL = ENV["SLACK_URL"]
MATCH_PASSWORD = ENV["MATCH_PASSWORD"]
DEVELOPER_APP_ID = 1669162723
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 3600
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end
  

platform :ios do

  lane :beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: "#{APPLE_KEY_ID}",
      issuer_id: "#{APPLE_ISSUER_ID}",
      key_content: "#{APPLE_KEY_CONTENT}",            
      duration: 0,            
      in_house: false,
      is_key_content_base64: true
    )

   increment_build_number(xcodeproj: "MOSIPResidentApp.xcodeproj")
  
    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64("#{GIT_AUTHORIZATION}"),
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    profile_mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]

    gym(
      configuration: "Release",
      workspace: "MOSIPResidentApp.xcworkspace",
      scheme: "MOSIPResidentApp",
      export_method: "app-store",
      
      export_options: {
        provisioningProfiles: { 
            "#{DEVELOPER_APP_ID}" => "#{PROVISIONING_PROFILE_SPECIFIER}"
        }
      }
    )


    pilot(
       app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
       api_key: api_key,
       ipa: "./MOSIPResidentApp.ipa",
       skip_waiting_for_build_processing: true
    )

    delete_temp_keychain(keychain_name)

    commit_version_bump(message: 'bump build')
    push_to_git_remote

    slack(
      message: "App successfully uploaded to iTunesConnect.",
      success: true,
      slack_url: "https://hooks.slack.com/services/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"
    )
  end
end